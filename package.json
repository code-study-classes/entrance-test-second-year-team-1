{
  "name": "entrance-test-second-year-team-1",
  "version": "1.0.0",
  "description": "[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-22041afd0340ce965d47ae6ef1cefeee28c7c493a6346c4f15d667ab976d596c.svg)](https://classroom.github.com/a/bD90eOAJ)\r # Входная работа для определения того, что вы помните (или не помните) после каникул\r ## Общее описание работы\r 1. Работа может выполняться как в команде (2-5 человек), так и индивидуально.\r     - Перед началом выполнения работы в README укажите состав команды или просто ваше имя.\r 2. Работа состоит из 2 заданий, каждое из которых имеет свои критерии оценки.\r 3. В оценке работы учитывается качество кода (выделение абстракций, функциональный подход, линтинг).\r 4. В оценке работы учитывается архитектура проекта и структура репозитория.\r 5. Интегрировать в работу верстку или нет - остается на ваш выбор.\r 6. Чем можно пользоваться? Чем угодно, кроме нейронок.\r 7. Плакать разрешается.\r ## Легенда\r Тайлер Дерден и Патрик Бэйтмен объездили всю страну. Потрясающий сервис туристических городов оставил после себя неизгладимое впечатление, абонемент к психологу и пару седых волос. Накопив некоторую сумму денег, новоиспечённые коллеги Тайлер и Патрик решили открыть свою сеть отелей, чтобы поднять с колен туристический сервис страны.  \r Таким образом, у них возникла потребность в создании эффективной системы управления отелями с правильно выстроенными бизнес-процессами, что позволит развивать свой бизнес и богатеть.\r ## Техническое задание\r ### Задание 1\r 1. Разработать структуру хранения информации об отелях.\r     - **Название отеля** — строка до 150 символов, хранит наименование отеля.\r     - **Регион** — ссылка на элемент другого файла, где хранится список всех регионов.\r 2. Разработать структуру номерного фонда каждого отеля.\r     -  Разработать структуру хранения информации о номерном фонде отеля (структура хранения подчинена справочнику «Отели»).\r     -  Основные характеристики номера:\r         - **Номер** — строка до 10 символов.\r         - **Категория** — одно из допустимых значений: Стандарт, Люкс, Апартаменты.\r         - **Количество мест** - определяется автоматически исходя из категории номера: Стандарт и Люкс до 2х мест, Апартаменты до 4х мест.\r         - **Статус** - одно из допустимых значений: свободен, занят. Значение по умолчанию - свободен.\r 3. Реализовать функцию изменения статуса номера.  \r     Функция меняет статус номера на противоположный.\r 4. Реализовать функцию просмотра фонда свободных номеров.  \r     Функция генерирует список номеров, отвечающих на вопрос: «Какие номера свободны на определенный промежуток дат?».\r 5. Тестирование.  \r     Написать автоматический тест, проверяющий корректность функций изменения статуса и просмотра фонда.  \r     Заполните минимальный набор данных:\r     - 2 отеля в различных регионах.\r     - В каждом отеле заполнить структуру номерного фонда — не менее 10 номеров.\r ### Задание 2\r 1. Создать структуру хранения информации о постояльцах отеля.\r     - **ФИО постояльца** - строка до 150 символов.\r     - **Контактный телефон** - строка до 12 символов.\r 2. Создать структуру храниения информации о плательщике.  \r     В номера могут заселяться до 4-х человек, при этом плательщик может быть один — либо физическое лицо, либо юридическое лицо.\r     - **Плательщик** - строка до 150 символов.\r     - **Вид плательщика** - одно из допустимых значений: физическое лицо, юридическое лицо.\r 3. Реализовать функцию бронирования номера.  \r     Функция создает запись о бронировании (учтите, что событие бронирования меняет статус номера).\r     - **Дата заказа** - тип данных Date().\r     - **Заказчик** - ссылка на элемент из файла о клиентах.\r     - **Постояльцы** - массив ссылок на элементы из файла о постояльцах.\r     - **Отель** - ссылка на элемент из файла о клиентах.\r     - **Бронируемый номер** - доступны для выбора только номера со статусом \"свободен\".\r     - **Дата заезда** - тип данных Date().\r     - **Дата выезда** - тип данных Date().\r 4. Тестирование.  \r     Написать автоматический тест, проверяющий корректность функций бронирования.  \r     Заполните минимальный набор данных:  \r     - Минимум 2 записи о бронировании.\r ## Критерии оценки:\r <table>\r     <tr>\r         <th>Критерий</th>\r         <th>Балл</th>\r         <th>Прибавка</th>\r         <th>Итоговый балл</th>\r     </tr>\r     <tr>\r     \t<td>Реализована структура \"Отели\"</td>\r     \t<td>1</td>\r     \t<td>Реализована функция добавления, удаления и изменения данных об отеле (+3)</td>\r     \t<td>4</td>\r     </tr>\r     <tr>\r     \t<td>Реализована структура \"Регионы\"</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Протестировано ограничение на длину в названия отеля</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Протестировано ограничение на длину в названии номера</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Протестирование ограничение допустимых значений категории номера</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Протестирована автоматическое установление количества мест в номере</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Протестировано изменение статуса номера</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Протестирована корректность вывода списка свободных номеров</td>\r     \t<td>3</td>\r     \t<td>Функция проводит агрегацию данных и выводит сводный список количества свободных номеров в каждой категории (+2)</td>\r     \t<td>5</td>\r     </tr>\r     <tr>\r     \t<td>Реализована структура \"Постояльцы\"</td>\r     \t<td>1</td>\r     \t<td>Реализована функция удаления и изменения данных о постояльце (+1). Структура автоматически пополняется при поступлении нового бронирования (+3)</td>\r     \t<td>5</td>\r     </tr>\r     <tr>\r     \t<td>Протестировано ограничение на длину в ФИО постояльца</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Для номера телефона реализован шаблон \"+7ххх-ххх-хх-хх\"</td>\r     \t<td>2</td>\r     \t<td>Протестировано форматирование введенного телефона под шаблон (+2). Протестировано ограничение на длину номера телефона (+1)</td>\r     \t<td>5</td>\r     </tr>\r     <tr>\r     \t<td>Реализована и протестирована механика идентификации полных тезок среди постояльцев</td>\r     \t<td>5</td>\r     \t<td></td>\r     \t<td>5</td>\r     </tr>\r     <tr>\r     \t<td>Реализована структура \"Плательщики\"</td>\r     \t<td>1</td>\r     \t<td>Реализована функция удаления и изменения данных о плательщике (+1). Структура автоматически пополняется при поступлении нового бронирования (+3)</td>\r     \t<td>5</td>\r     </tr>\r     <tr>\r     \t<td>Протестировано ограничение на длину в наименовании плательщика</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Протестирование ограничение допустимых значений вида плательщика</td>\r     \t<td>1</td>\r     \t<td></td>\r     \t<td>1</td>\r     </tr>\r     <tr>\r     \t<td>Протестирована функция создания бронирования</td>\r     \t<td>5</td>\r     \t<td>Функция автоматически меняет статус номера (+2). Функция осуществляет проверку допустимости значений дат заезда и выезда (+3)</td>\r     \t<td>10</td>\r     </tr>\r     <tr>\r     \t<td>Протестирован негативный сценарий проверки бронирования отеля со статусом \"занят\"</td>\r     \t<td>3</td>\r     \t<td>Функция выводит список свободных номеров в качестве альтернативы бронирования (+4)</td>\r     \t<td>7</td>\r     </tr>\r     <tr>\r         <td colspan=\"3\" align=\"right\">Итого</td>\r     \t<td>55</td>\r     </tr>\r </table>",
  "main": "main.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "commander": "^12.1.0",
    "make": "^0.0.0"
  }
}
